name: 'Tomnomnom Tools Scan'
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  tomnomnom-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.20'  # Update to the latest stable version of Go

      - name: Install tools
        run: |
          export GOPATH=$HOME/go
          export PATH=$PATH:$GOPATH/bin
          go install github.com/tomnomnom/assetfinder@latest
          go install github.com/tomnomnom/httprobe@latest
          go install github.com/tomnomnom/gf@latest
          go install github.com/tomnomnom/waybackurls@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          
          # Download GF patterns
          mkdir -p ~/.gf
          cd ~/.gf
          git clone https://github.com/1ndianl33t/Gf-Patterns.git
          mv Gf-Patterns/*.json ./
          
          # Create crtsh tool
          mkdir -p ~/go/src/github.com/tomnomnom/crtsh
          cat <<EOF > ~/go/src/github.com/tomnomnom/crtsh/main.go
          package main

          import (
            "encoding/json"
            "fmt"
            "net/http"
            "os"
          )

          type crtshEntry struct {
            NameValue string `json:"name_value"`
          }

          func main() {
            if len(os.Args) != 2 {
              fmt.Printf("Usage: %s <domain>\\n", os.Args[0])
              os.Exit(1)
            }
            domain := os.Args[1]
            url := fmt.Sprintf("https://crt.sh/?q=%%25.%s&output=json", domain)

            resp, err := http.Get(url)
            if err != nil {
              fmt.Println("Error fetching crt.sh data:", err)
              os.Exit(1)
            }
            defer resp.Body.Close()

            var entries []crtshEntry
            if err := json.NewDecoder(resp.Body).Decode(&entries); err != nil {
              fmt.Println("Error decoding JSON:", err)
              os.Exit(1)
            }

            for _, entry := range entries {
              fmt.Println(entry.NameValue)
            }
          }
          EOF
          cd ~/go/src/github.com/tomnomnom/crtsh
          go build -o ~/go/bin/crtsh
        shell: bash

      - name: Run assetfinder
        run: |
          ~/go/bin/assetfinder --subs-only example.com > ${{runner.temp}}/assetfinder.out
        shell: bash

      - name: Run httprobe
        run: |
          cat ${{runner.temp}}/assetfinder.out | ~/go/bin/httprobe --prefer-https > ${{runner.temp}}/httprobe.out
        shell: bash

      - name: Run gf for base64
        run: |
          find . -type f | ~/go/bin/gf base64 > ${{runner.temp}}/gf-base64.out
        shell: bash
      
      - name: Run gf for xss
        run: |
          find . -type f | ~/go/bin/gf xss > ${{runner.temp}}/gf-xss.out
        shell: bash
      
      - name: Run gf for sqli
        run: |
          find . -type f | ~/go/bin/gf sqli > ${{runner.temp}}/gf-sqli.out
        shell: bash

      - name: Run gf for ssrf
        run: |
          find . -type f | ~/go/bin/gf ssrf > ${{runner.temp}}/gf-ssrf.out
        shell: bash

      - name: Run crtsh
        run: |
          ~/go/bin/crtsh example.com > ${{runner.temp}}/crtsh.out
        shell: bash

      - name: Run httpx
        run: |
          cat ${{runner.temp}}/assetfinder.out | ~/go/bin/httpx -ports 80,443,8080,8443 -title -status-code -json > ${{runner.temp}}/httpx.out
        shell: bash

      - name: Run waybackurls
        run: |
          echo example.com | ~/go/bin/waybackurls > ${{runner.temp}}/waybackurls.out
        shell: bash

      - name: Display results
        run: |
          echo -e "\n\033[1;34m=== Assetfinder Results ===\033[0m"
          cat ${{runner.temp}}/assetfinder.out
          echo -e "\033[1;34m=== End of Assetfinder Results ===\033[0m\n"
          
          echo -e "\n\033[1;34m=== HTTProbe Results ===\033[0m"
          cat ${{runner.temp}}/httprobe.out
          echo -e "\033[1;34m=== End of HTTProbe Results ===\033[0m\n"
          
          echo -e "\n\033[1;34m=== GF Base64 Results ===\033[0m"
          cat ${{runner.temp}}/gf-base64.out
          echo -e "\033[1;34m=== End of GF Base64 Results ===\033[0m\n"
          
          echo -e "\n\033[1;34m=== GF XSS Results ===\033[0m"
          cat ${{runner.temp}}/gf-xss.out
          echo -e "\033[1;34m=== End of GF XSS Results ===\033[0m\n"
          
          echo -e "\n\033[1;34m=== GF SQLi Results ===\033[0m"
          cat ${{runner.temp}}/gf-sqli.out
          echo -e "\033[1;34m=== End of GF SQLi Results ===\033[0m\n"
          
          echo -e "\n\033[1;34m=== GF SSRF Results ===\033[0m"
          cat ${{runner.temp}}/gf-ssrf.out
          echo -e "\033[1;34m=== End of GF SSRF Results ===\033[0m\n"

          echo -e "\n\033[1;34m=== CRTSH Results ===\033[0m"
          cat ${{runner.temp}}/crtsh.out
          echo -e "\033[1;34m=== End of CRTSH Results ===\033[0m\n"
          
          echo -e "\n\033[1;34m=== HTTPX Results ===\033[0m"
          cat ${{runner.temp}}/httpx.out
          echo -e "\033[1;34m=== End of HTTPX Results ===\033[0m\n"
          
          echo -e "\n\033[1;34m=== WaybackURLs Results ===\033[0m"
          cat ${{runner.temp}}/waybackurls.out
          echo -e "\033[1;34m=== End of WaybackURLs Results ===\033[0m\n"
        shell: bash

      - name: Upload scan results
        uses: actions/upload-artifact@v4
        with:
          name: tomnomnom-tools-results
          path: |
            ${{runner.temp}}/assetfinder.out
            ${{runner.temp}}/httprobe.out
            ${{runner.temp}}/gf-base64.out
            ${{runner.temp}}/gf-xss.out
            ${{runner.temp}}/gf-sqli.out
            ${{runner.temp}}/gf-ssrf.out
            ${{runner.temp}}/crtsh.out
            ${{runner.temp}}/httpx.out
            ${{runner.temp}}/waybackurls.out
